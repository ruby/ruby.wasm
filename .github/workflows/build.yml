name: Build ruby.wasm
on:
  push:
    branches: [main]
    tags:
  pull_request:
  workflow_call:
    inputs:
      publish:
        type: boolean
        description: "Whether to publish or not"
        default: true
      prerel_name:
        type: string
        description: "Pre-release name to be released"
        required: true
    secrets:
      NODE_AUTH_TOKEN:
        required: true

jobs:
  lint:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - run: sudo apt-get install clang-format
      - run: ./tools/clang-format-diff.sh
      - run: rake check:bindgen
      - run: git diff --exit-code

  build-builder-image:
    strategy:
      fail-fast: false
      matrix:
        entry:
          - { tag: wasm32-unknown-wasi }
          - { tag: wasm32-unknown-emscripten }
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
      - name: Build
        uses: docker/build-push-action@v2
        with:
          context: builders/${{ matrix.entry.tag }}
          outputs: type=oci,dest=/tmp/image.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Upload image artifact
        uses: actions/upload-artifact@v2
        with:
          name: ruby.wasm-builder-${{ matrix.entry.tag }}
          path: /tmp/image.tar
      - name: Push
        uses: docker/build-push-action@v2
        with:
          context: builders/${{ matrix.entry.tag }}
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ghcr.io/${{ github.repository_owner }}/ruby.wasm-builder:${{ matrix.entry.tag }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # https://github.com/docker/build-push-action/issues/252#issuecomment-744400434
      - run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  rake-tasks:
    strategy:
      fail-fast: false
      matrix:
        entry:
          - task: "build:head-wasm32-unknown-emscripten-full"
            artifact: "rubies/ruby-head-wasm32-unknown-emscripten-full.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-emscripten-full"
            builder: "wasm32-unknown-emscripten"
          - task: "build:head-wasm32-unknown-emscripten-minimal"
            artifact: "rubies/ruby-head-wasm32-unknown-emscripten-minimal.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-emscripten-minimal"
            builder: "wasm32-unknown-emscripten"
          - task: "build:head-wasm32-unknown-wasi-full"
            artifact: "rubies/ruby-head-wasm32-unknown-wasi-full.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-wasi-full"
            builder: "wasm32-unknown-wasi"
          - task: "build:head-wasm32-unknown-wasi-full-debug"
            artifact: "rubies/ruby-head-wasm32-unknown-wasi-full-debug.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-wasi-full-debug"
            builder: "wasm32-unknown-wasi"
          - task: "build:head-wasm32-unknown-wasi-full-js"
            artifact: "rubies/ruby-head-wasm32-unknown-wasi-full-js.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-wasi-full-js"
            builder: "wasm32-unknown-wasi"
          - task: "build:head-wasm32-unknown-wasi-full-js-debug"
            artifact: "rubies/ruby-head-wasm32-unknown-wasi-full-js-debug.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-wasi-full-js-debug"
            builder: "wasm32-unknown-wasi"
          - task: "build:head-wasm32-unknown-wasi-minimal"
            artifact: "rubies/ruby-head-wasm32-unknown-wasi-minimal.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-wasi-minimal"
            builder: "wasm32-unknown-wasi"
          - task: "build:head-wasm32-unknown-wasi-minimal-debug"
            artifact: "rubies/ruby-head-wasm32-unknown-wasi-minimal-debug.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-wasi-minimal-debug"
            builder: "wasm32-unknown-wasi"
          - task: "build:head-wasm32-unknown-wasi-minimal-js"
            artifact: "rubies/ruby-head-wasm32-unknown-wasi-minimal-js.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-wasi-minimal-js"
            builder: "wasm32-unknown-wasi"
          - task: "build:head-wasm32-unknown-wasi-minimal-js-debug"
            artifact: "rubies/ruby-head-wasm32-unknown-wasi-minimal-js-debug.tar.gz"
            artifact_name: "ruby-head-wasm32-unknown-wasi-minimal-js-debug"
            builder: "wasm32-unknown-wasi"

          - task: "npm:ruby-head-wasm-emscripten"
            prerelease: "npm:configure_prerelease"
            artifact: "packages/npm-packages/ruby-head-wasm-emscripten/ruby-head-wasm-emscripten-*.tgz"
            artifact_name: "npm-ruby-head-wasm-emscripten"
            builder: "wasm32-unknown-emscripten"
          - task: "npm:ruby-head-wasm-wasi"
            test: "npm:ruby-head-wasm-wasi-check"
            prerelease: "npm:configure_prerelease"
            artifact: "packages/npm-packages/ruby-head-wasm-wasi/ruby-head-wasm-wasi-*.tgz"
            artifact_name: "npm-ruby-head-wasm-wasi"
            builder: "wasm32-unknown-wasi"

          - task: "wapm:ruby-build"
            artifact: "packages/wapm-packages/ruby/dist"
            artifact_name: "wapm-ruby"
            builder: "wasm32-unknown-wasi"
          - task: "wapm:irb-build"
            artifact: "packages/wapm-packages/irb/dist"
            artifact_name: "wapm-irb"
            builder: "wasm32-unknown-wasi"

    needs: [build-builder-image]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Fetch builder image
        uses: actions/download-artifact@v2
        with:
          name: ruby.wasm-builder-${{ matrix.entry.builder }}
      - name: Load builder image
        id: load-image
        run: |
          docker load --input image.tar | tee image-info.txt
          echo "BUILDER_IMAGE_ID=$(cut -d ':' -f 3 image-info.txt)" >> $GITHUB_ENV
      - name: Pre-release configuration
        run: rake ${{ matrix.entry.prerelease }}[${{ inputs.prerel_name }}]
        if: ${{ inputs.prerel_name != '' && matrix.entry.prerelease != '' }}
      - name: rake ${{ matrix.entry.task }}
        run: docker run -v "$GITHUB_WORKSPACE:/build" -w /build -e "GNUMAKEFLAGS=-j$((1 + $(nproc --all)))" sha256:$BUILDER_IMAGE_ID rake ${{ matrix.entry.task }}
      - name: rake ${{ matrix.entry.test }}
        run: rake ${{ matrix.entry.test }}
        if: ${{ matrix.entry.test != '' }}
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.entry.artifact }}
        with:
          name: ${{ matrix.entry.artifact_name }}
          path: ${{ matrix.entry.artifact }}

  release-artifacts:
    needs: [rake-tasks]
    runs-on: ubuntu-20.04
    if: ${{ startsWith(github.ref, 'refs/tags/') || inputs.publish }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          path: release
      - uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - run: echo "PREREL_NAME=${{ inputs.prerel_name }}" >> $GITHUB_ENV
      - run: rake "publish[${PREREL_NAME:-$GITHUB_REF_NAME}]"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
